import os
import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
import fitz  # PyMuPDF
from collections import defaultdict

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
CHOOSE_ACTION, CHOOSE_SPLIT_MODE, AWAIT_SPLIT_FILE, AWAIT_SPLIT_ORDER, \
AWAIT_COMBINE_FILES, AWAIT_ASSEMBLY_COMMON, AWAIT_ASSEMBLY_UNIQUE, CHOOSE_GROUP_ACTION = range(8)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è Markdown ---
def escape_markdown_v2(text: str) -> str:
    escape_chars = r'_*[]()~`>#+-=|{}.!'
    return re.sub(f'([{re.escape(escape_chars)}])', r'\\\1', text)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
MAIN_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("ü™ì –†–∞–∑–±–∏—Ç—å PDF —Ñ–∞–π–ª", callback_data="split")],
    [InlineKeyboardButton("üñáÔ∏è –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF", callback_data="combine")],
    [InlineKeyboardButton("‚ûï –°–æ–±—Ä–∞—Ç—å —Å –æ–±—â–∏–º —Ñ–∞–π–ª–æ–º", callback_data="assembly")],
])

SPLIT_MODE_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ü–æ –æ–¥–Ω–æ–º—É –ª–∏—Å—Ç—É", callback_data="split_single"), InlineKeyboardButton("–ü–æ –¥–≤–∞ –ª–∏—Å—Ç–∞", callback_data="split_double")],
    [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø–æ—Ä—è–¥–æ–∫", callback_data="split_custom")],
    [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="main_menu")],
])

# --- –ù–û–í–ò–ù–ö–ê: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –±—ã—Å—Ç—Ä—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ---
GROUP_ACTION_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üñáÔ∏è –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª", callback_data="group_combine")],
    [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="main_menu")],
])

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–±–æ—Ä–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø ---
media_group_files = defaultdict(list)

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–ò–ê–õ–û–ì–ê ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF.\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=MAIN_KEYBOARD
    )
    return CHOOSE_ACTION

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=MAIN_KEYBOARD)
    return CHOOSE_ACTION

async def return_to_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str) -> int:
    context.user_data.clear()
    chat_id = update.effective_chat.id
    if update.callback_query:
        await update.callback_query.answer()
    
    await context.bot.send_message(chat_id=chat_id, text=message)
    await context.bot.send_message(chat_id=chat_id, text="–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=MAIN_KEYBOARD)
    return CHOOSE_ACTION

# --- –£–õ–£–ß–®–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –§–ê–ô–õ–û–í ---

async def process_media_group(context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É —Ñ–∞–π–ª–æ–≤ –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏."""
    job_data = context.job.data
    media_group_id = job_data['media_group_id']
    chat_id = job_data['chat_id']
    
    documents = media_group_files.pop(media_group_id, [])
    if not documents: return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∂–¥–µ–º –ª–∏ –º—ã —Ñ–∞–π–ª—ã –¥–ª—è –∫–∞–∫–æ–π-—Ç–æ –æ–ø–µ—Ä–∞—Ü–∏–∏
    expected_action = context.user_data.get('awaiting_file_for')

    if expected_action in ['combine', 'assembly_unique']:
        if 'files_to_process' not in context.user_data:
            context.user_data['files_to_process'] = []
        context.user_data['files_to_process'].extend(documents)
        await context.bot.send_message(chat_id, f"–î–æ–±–∞–≤–ª–µ–Ω–æ {len(documents)} —Ñ–∞–π–ª–∞(–æ–≤) –≤ —Å–ø–∏—Å–æ–∫.")
    else:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å–ª–∞–Ω—ã "–∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞" - —ç—Ç–æ –±—ã—Å—Ç—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –≥—Ä—É–ø–ø—ã
        context.user_data['group_files_to_process'] = documents
        await context.bot.send_message(
            chat_id,
            f"–Ø –ø–æ–ª—É—á–∏–ª–∞ {len(documents)} —Ñ–∞–π–ª–∞(–æ–≤). –ß—Ç–æ —Å –Ω–∏–º–∏ —Å–¥–µ–ª–∞—Ç—å?",
            reply_markup=GROUP_ACTION_KEYBOARD
        )

async def document_router(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ì–ª–∞–≤–Ω—ã–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –≤—Å–µ—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –†–∞–∑–¥–µ–ª—è–µ—Ç –æ–¥–∏–Ω–æ—á–Ω—ã–µ —Ñ–∞–π–ª—ã –∏ –≥—Ä—É–ø–ø—ã."""
    # --- –°–¶–ï–ù–ê–†–ò–ô 1: –§–ê–ô–õ –Ø–í–õ–Ø–ï–¢–°–Ø –ß–ê–°–¢–¨–Æ –ì–†–£–ü–ü–´ ---
    if update.message.media_group_id:
        media_group_id = update.message.media_group_id
        media_group_files[media_group_id].append(update.message.document)

        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π —Ç–∞–π–º–µ—Ä –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—ã–π, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        jobs = context.job_queue.get_jobs_by_name(str(media_group_id))
        for job in jobs:
            job.schedule_removal()
        
        context.job_queue.run_once(
            process_media_group,
            when=1.5, # –î–∞–µ–º 1.5 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ —Å–±–æ—Ä –≥—Ä—É–ø–ø—ã
            data={'media_group_id': media_group_id, 'chat_id': update.effective_chat.id},
            name=str(media_group_id)
        )
        # –ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —Ç.–∫. –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ª–æ–∂–µ–Ω–∞
        return

    # --- –°–¶–ï–ù–ê–†–ò–ô 2: –ü–†–ò–®–ï–õ –û–î–ò–ù–û–ß–ù–´–ô –§–ê–ô–õ ---
    else:
        expected_action = context.user_data.get('awaiting_file_for')
        
        # –ï—Å–ª–∏ –º—ã –∂–¥–∞–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª –≤ —Ä–∞–º–∫–∞—Ö –¥–∏–∞–ª–æ–≥–∞
        if expected_action == 'split':
            return await split_file_handler(update, context)
        if expected_action == 'combine':
            return await receive_file_for_list(update, context, AWAIT_COMBINE_FILES)
        if expected_action == 'assembly_common':
            return await receive_assembly_common_file(update, context)
        if expected_action == 'assembly_unique':
            return await receive_file_for_list(update, context, AWAIT_ASSEMBLY_UNIQUE)
        
        # –ï—Å–ª–∏ —Ñ–∞–π–ª –ø—Ä–∏—à–µ–ª "–∏–∑ –Ω–∏–æ—Ç–∫—É–¥–∞" (–±—ã—Å—Ç—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª—è –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)
        else:
            document = update.message.document
            if document.mime_type != 'application/pdf':
                await update.message.reply_text("–≠—Ç–æ –Ω–µ PDF-—Ñ–∞–π–ª.")
                return CHOOSE_ACTION

            context.user_data['file_to_split'] = document
            safe_filename = escape_markdown_v2(document.file_name)
            await update.message.reply_text(
                f"–Ø –ø–æ–ª—É—á–∏–ª–∞ —Ñ–∞–π–ª `{safe_filename}`\n–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —Ä–∞–∑–±–∏—Ç—å?",
                reply_markup=SPLIT_MODE_KEYBOARD,
                parse_mode='MarkdownV2'
            )
            return CHOOSE_SPLIT_MODE

# --- –õ–û–ì–ò–ö–ê –°–¶–ï–ù–ê–†–ò–Ø "–†–ê–ó–ë–ò–¢–¨ PDF" ---
# ... (–≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
async def ask_split_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∏—Ç—å PDF —Ñ–∞–π–ª?", reply_markup=SPLIT_MODE_KEYBOARD)
    return CHOOSE_SPLIT_MODE

async def handle_split_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['split_mode'] = query.data

    if 'file_to_split' in context.user_data:
        if query.data != 'split_custom':
            await query.edit_message_text("–ü–æ–Ω—è–ª–∞. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
            return await split_file_handler(update, context, pre_saved=True)
        else:
            await query.edit_message_text("–•–æ—Ä–æ—à–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–±–∏–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `3,3,4`)", parse_mode="MarkdownV2")
            return AWAIT_SPLIT_ORDER
    else:
        if query.data == 'split_custom':
            await query.edit_message_text("–•–æ—Ä–æ—à–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Ä—è–¥–æ–∫ —Ä–∞–∑–±–∏–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `3,3,4`)", parse_mode="MarkdownV2")
            return AWAIT_SPLIT_ORDER
        else:
            await query.edit_message_text("–ü–æ–Ω—è–ª–∞. –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏.")
            context.user_data['awaiting_file_for'] = 'split'
            return AWAIT_SPLIT_FILE

async def receive_split_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    order = update.message.text
    if not re.match(r'^\d+(,\s*\d+)*$', order):
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–∞–ø—è—Ç—ã–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: `3,3,4`", parse_mode="MarkdownV2")
        return AWAIT_SPLIT_ORDER
        
    context.user_data['custom_order'] = [int(x) for x in order.split(',')]
    
    if 'file_to_split' in context.user_data:
        await update.message.reply_text("–ü–æ—Ä—è–¥–æ–∫ –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        return await split_file_handler(update, context, pre_saved=True)
    else:
        await update.message.reply_text(f'–û—Ç–ª–∏—á–Ω–æ, –ø–æ—Ä—è–¥–æ–∫ "{order}" –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.')
        context.user_data['awaiting_file_for'] = 'split'
        return AWAIT_SPLIT_FILE

async def split_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, pre_saved: bool = False) -> int:
    if pre_saved:
        document = context.user_data.get('file_to_split')
    else:
        document = update.message.document
        await update.message.reply_text("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    final_message = "–ì–æ—Ç–æ–≤–æ! –í—Å–µ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
    try:
        # ... –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ ...
        file = await context.bot.get_file(document.file_id)
        file_bytes = await file.download_as_bytearray()
        pdf_doc = fitz.open(stream=file_bytes, filetype="pdf")
        total_pages = pdf_doc.page_count
        ranges, mode = [], context.user_data.get('split_mode')
        if mode == 'split_single': ranges = [[i] for i in range(total_pages)]
        elif mode == 'split_double':
            ranges = [[i, i + 1] for i in range(0, total_pages, 2)]
            if total_pages % 2 != 0: ranges[-1] = [total_pages - 1]
        elif mode == 'split_custom':
            order, current_page = context.user_data.get('custom_order', []), 0
            for part_size in order:
                if current_page >= total_pages: break
                end_page = min(current_page + part_size, total_pages)
                ranges.append(list(range(current_page, end_page)))
                current_page = end_page
        
        base_name = os.path.splitext(document.file_name)[0]
        for i, page_range in enumerate(ranges):
            new_doc = fitz.open()
            new_doc.insert_pdf(pdf_doc, from_page=page_range[0], to_page=page_range[-1])
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=new_doc.write(),
                filename=f"{base_name}_part_{i + 1}.pdf"
            )
            new_doc.close()
        pdf_doc.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ PDF: {e}")
        final_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
    
    return await return_to_main_menu(update, context, message=final_message)


# --- –õ–û–ì–ò–ö–ê –û–°–¢–ê–õ–¨–ù–´–• –°–¶–ï–ù–ê–†–ò–ï–í ---

async def ask_for_combine_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['files_to_process'] = []
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", callback_data="process_done")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await query.edit_message_text(
        "–ü–æ–Ω—è–ª–∞. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.", reply_markup=keyboard)
    context.user_data['awaiting_file_for'] = 'combine'
    return AWAIT_COMBINE_FILES

async def receive_file_for_list(update: Update, context: ContextTypes.DEFAULT_TYPE, next_state: int):
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if 'files_to_process' not in context.user_data:
        context.user_data['files_to_process'] = []
    
    document = update.message.document
    context.user_data['files_to_process'].append(document)
        
    await update.message.reply_text(f"–§–∞–π–ª '{document.file_name}' –¥–æ–±–∞–≤–ª–µ–Ω ({len(context.user_data['files_to_process'])} –≤—Å–µ–≥–æ).")
    return next_state

async def combine_files_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, from_group: bool = False) -> int:
    query = update.callback_query
    await query.answer()
    
    documents = context.user_data.get('group_files_to_process') if from_group else context.user_data.get('files_to_process', [])
    
    if len(documents) < 2:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Ñ–∞–π–ª–∞.")
        return CHOOSE_ACTION if from_group else AWAIT_COMBINE_FILES
    
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ...")
    final_message = "–ì–æ—Ç–æ–≤–æ! –í–∞—à –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."
    try:
        # ... (–ª–æ–≥–∏–∫–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
        result_doc = fitz.open()
        for doc in documents:
            file = await context.bot.get_file(doc.file_id)
            file_bytes = await file.download_as_bytearray()
            pdf_doc = fitz.open(stream=file_bytes, filetype="pdf")
            result_doc.insert_pdf(pdf_doc)
            pdf_doc.close()
            
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=result_doc.write(),
            filename="combined_document.pdf"
        )
        result_doc.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ PDF: {e}")
        final_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."
        
    return await return_to_main_menu(update, context, message=final_message)
# ... –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (—Å–±–æ—Ä–∫–∞ —Å –æ–±—â–∏–º) –æ—Å—Ç–∞—é—Ç—Å—è —Å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ–π –ª–æ–≥–∏–∫–æ–π ...
async def ask_for_assembly_common_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    await query.edit_message_text("–•–æ—Ä–æ—à–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –û–î–ò–ù –æ–±—â–∏–π PDF —Ñ–∞–π–ª.")
    context.user_data['awaiting_file_for'] = 'assembly_common'
    return AWAIT_ASSEMBLY_COMMON

async def receive_assembly_common_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['common_file'] = update.message.document; context.user_data['files_to_process'] = []
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –°–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã", callback_data="process_done")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await update.message.reply_text("–û–±—â–∏–π —Ñ–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –£–ù–ò–ö–ê–õ–¨–ù–´–ï PDF —Ñ–∞–π–ª—ã.", reply_markup=keyboard)
    context.user_data['awaiting_file_for'] = 'assembly_unique'
    return AWAIT_ASSEMBLY_UNIQUE

async def assembly_files_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query; await query.answer()
    unique_docs = context.user_data.get('files_to_process', [])
    common_doc_msg = context.user_data.get('common_file')
    if not unique_docs:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞.")
        context.user_data['awaiting_file_for'] = 'assembly_unique'
        return AWAIT_ASSEMBLY_UNIQUE
        
    await query.edit_message_text("–í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É...")
    final_message = "–ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."
    try:
        common_file = await context.bot.get_file(common_doc_msg.file_id)
        common_file_bytes = await common_file.download_as_bytearray()
        for doc in unique_docs:
            unique_file = await context.bot.get_file(doc.file_id)
            unique_file_bytes = await unique_file.download_as_bytearray()
            result_doc = fitz.open(stream=unique_file_bytes, filetype="pdf")
            common_pdf = fitz.open(stream=common_file_bytes, filetype="pdf")
            result_doc.insert_pdf(common_pdf)
            common_pdf.close()
            await context.bot.send_document(chat_id=update.effective_chat.id, document=result_doc.write(), filename=f"assembled_{doc.file_name}")
            result_doc.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ PDF: {e}")
        final_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."

    return await return_to_main_menu(update, context, message=final_message)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}", exc_info=context.error)

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN: raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Document.PDF & filters.ChatType.PRIVATE, document_router),
            # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û–±—ä–µ–¥–∏–Ω–∏—Ç—å" –∏–∑ –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è
            CallbackQueryHandler(lambda u, c: combine_files_handler(u, c, from_group=True), pattern="^group_combine$"),
        ],
        states={
            CHOOSE_ACTION: [
                CallbackQueryHandler(ask_split_mode, pattern="^split$"),
                CallbackQueryHandler(ask_for_combine_files, pattern="^combine$"),
                CallbackQueryHandler(ask_for_assembly_common_file, pattern="^assembly$"),
            ],
            CHOOSE_SPLIT_MODE: [CallbackQueryHandler(handle_split_choice, pattern="^split_(single|double|custom)$")],
            AWAIT_SPLIT_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_split_order)],
            AWAIT_SPLIT_FILE: [MessageHandler(filters.Document.PDF, document_router)],
            AWAIT_COMBINE_FILES: [
                MessageHandler(filters.Document.PDF, document_router),
                CallbackQueryHandler(combine_files_handler, pattern="^process_done$"),
            ],
            AWAIT_ASSEMBLY_COMMON: [MessageHandler(filters.Document.PDF, document_router)],
            AWAIT_ASSEMBLY_UNIQUE: [
                MessageHandler(filters.Document.PDF, document_router),
                CallbackQueryHandler(assembly_files_handler, pattern="^process_done$"),
            ],
        },
        fallbacks=[
            CommandHandler("start", start),
            CallbackQueryHandler(main_menu, pattern="^main_menu$"),
        ],
        allow_reentry=True
    )

    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)

    WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")
    if WEBHOOK_URL:
        port = int(os.environ.get('PORT', '8443'))
        application.run_webhook(listen="0.0.0.0", port=port, url_path=TOKEN, webhook_url=f"{WEBHOOK_URL}/{TOKEN}")
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        application.run_polling()

if __name__ == "__main__":
    main()
