import os
import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
import fitz  # PyMuPDF

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler ---
(
    CHOOSE_ACTION,
    CHOOSE_SPLIT_MODE,
    AWAIT_SPLIT_ORDER,
    AWAIT_SPLIT_FILE,
    AWAIT_COMBINE_FILES,
    AWAIT_ASSEMBLY_COMMON,
    AWAIT_ASSEMBLY_UNIQUE,
    AWAITING_GROUP_ACTION_CHOICE,
) = range(8)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
MAIN_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("ü™ì –†–∞–∑–±–∏—Ç—å PDF —Ñ–∞–π–ª", callback_data="split")],
    [InlineKeyboardButton("üñáÔ∏è –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF", callback_data="combine")],
    [InlineKeyboardButton("‚ûï –°–æ–±—Ä–∞—Ç—å —Å –æ–±—â–∏–º —Ñ–∞–π–ª–æ–º", callback_data="assembly")],
])

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–ò–ê–õ–û–ì–ê ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    context.user_data.clear()
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª.",
        reply_markup=MAIN_KEYBOARD,
    )
    return CHOOSE_ACTION

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –æ—Ç–º–µ–Ω—è—è —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."""
    context.user_data.clear()
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=MAIN_KEYBOARD,
    )
    return CHOOSE_ACTION

async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    context.user_data.clear()
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?",
        reply_markup=MAIN_KEYBOARD,
    )
    return ConversationHandler.END

# --- "–£–ú–ù–´–ô" –û–ë–†–ê–ë–û–¢–ß–ò–ö –ü–ï–†–ï–°–õ–ê–ù–ù–´–• –§–ê–ô–õ–û–í ---

async def direct_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ä–∞–∑—É –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª(—ã)."""
    # –î–µ–ª–∞–µ–º —Ç–∞–∫, —á—Ç–æ–±—ã attachments –≤—Å–µ–≥–¥–∞ –±—ã–ª —Å–ø–∏—Å–∫–æ–º, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ,
    # –∫–∞–∫ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–π–ª (–Ω–∞–ø—Ä—è–º—É—é, –ø–µ—Ä–µ—Å—ã–ª–∫–æ–π, –≥—Ä—É–ø–ø–æ–π).
    raw_attachments = update.message.effective_attachment
    attachments = list(raw_attachments) if isinstance(raw_attachments, tuple) else [raw_attachments]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã - —ç—Ç–æ PDF.
    if not attachments or not all(hasattr(doc, 'mime_type') and doc.mime_type == 'application/pdf' for doc in attachments):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –∏–º–µ—é—Ç —Ñ–æ—Ä–º–∞—Ç PDF.")
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –Ω–µ –Ω–∞—á–∏–Ω–∞—è –¥–∏–∞–ª–æ–≥
        return CHOOSE_ACTION

    if len(attachments) == 1:
        context.user_data['file_to_process'] = attachments[0]
        filename = attachments[0].file_name.replace('_', '\\_').replace('*', '\\*').replace('[', '\\[').replace(']', '\\]')
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("–ü–æ –æ–¥–Ω–æ–º—É –ª–∏—Å—Ç—É", callback_data="split_single"), InlineKeyboardButton("–ü–æ –¥–≤–∞ –ª–∏—Å—Ç–∞", callback_data="split_double")],
            [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø–æ—Ä—è–¥–æ–∫", callback_data="split_custom")],
            [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="main_menu")],
        ])
        await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª —Ñ–∞–π–ª `{filename}`.\n–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —Ä–∞–∑–±–∏—Ç—å?", reply_markup=keyboard, parse_mode='MarkdownV2')
        return CHOOSE_SPLIT_MODE
    else:
        context.user_data['files_to_process'] = attachments
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton("üñáÔ∏è –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª", callback_data="group_combine")],
            [InlineKeyboardButton("ü™ì –†–∞–∑–±–∏—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª", callback_data="group_split")],
            [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="main_menu")],
        ])
        await update.message.reply_text(f"–Ø –ø–æ–ª—É—á–∏–ª {len(attachments)} —Ñ–∞–π–ª–æ–≤. –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∏–º–∏ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=keyboard)
        return AWAITING_GROUP_ACTION_CHOICE

# --- –õ–û–ì–ò–ö–ê –°–¶–ï–ù–ê–†–ò–Ø "–†–ê–ó–ë–ò–¢–¨ PDF" ---

async def ask_split_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ –æ–¥–Ω–æ–º—É –ª–∏—Å—Ç—É", callback_data="split_single"), InlineKeyboardButton("–ü–æ –¥–≤–∞ –ª–∏—Å—Ç–∞", callback_data="split_double")],
        [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø–æ—Ä—è–¥–æ–∫", callback_data="split_custom")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
    ])
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∏—Ç—å PDF —Ñ–∞–π–ª?", reply_markup=keyboard)
    return CHOOSE_SPLIT_MODE

async def handle_split_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['split_mode'] = query.data
    if query.data == 'split_custom':
        await query.edit_message_text("–•–æ—Ä–æ—à–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Ä—è–¥–∫–æ–º —Ä–∞–∑–±–∏–≤–∫–∏.\n\n**–ù–∞–ø—Ä–∏–º–µ—Ä, `3,3,4`** —Ä–∞–∑–æ–±—å–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –Ω–∞ —Ç—Ä–∏ —á–∞—Å—Ç–∏: 3, 3 –∏ 4 —Å—Ç—Ä–∞–Ω–∏—Ü—ã.", parse_mode='MarkdownV2')
        return AWAIT_SPLIT_ORDER
    else:
        if 'file_to_process' in context.user_data:
            return await split_file_handler(update, context)
        await query.edit_message_text("–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏.")
        return AWAIT_SPLIT_FILE

async def receive_split_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    order = update.message.text
    if not re.match(r'^\d+(\s*,\s*\d+)*$', order):
        await update.message.reply_text("–§–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–∞–ø—è—Ç—ã–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: `3,3,4`", parse_mode='MarkdownV2')
        return AWAIT_SPLIT_ORDER
    context.user_data['custom_order'] = [int(x.strip()) for x in order.split(',')]
    if 'file_to_process' in context.user_data:
        return await split_file_handler(update, context)
    await update.message.reply_text(f'–ü–æ—Ä—è–¥–æ–∫ "{order}" –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.')
    return AWAIT_SPLIT_FILE

async def split_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    chat_id = update.effective_chat.id
    if update.callback_query: await update.callback_query.edit_message_text("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    else: await context.bot.send_message(chat_id=chat_id, text="–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    try:
        doc_to_process = context.user_data.get('file_to_process') or (update.message and update.message.document)
        file = await context.bot.get_file(doc_to_process.file_id)
        file_bytes = await file.download_as_bytearray()
        pdf_doc = fitz.open(stream=file_bytes, filetype="pdf")
        total_pages = pdf_doc.page_count
        ranges, mode = [], context.user_data.get('split_mode')
        
        if mode in ('split_single', 'group_split'): ranges = [[i] for i in range(total_pages)]
        elif mode == 'split_double':
            ranges = [[i, i + 1] for i in range(0, total_pages, 2)]
            if total_pages % 2 != 0: ranges[-1] = [total_pages - 1]
        elif mode == 'split_custom':
            order, current_page = context.user_data.get('custom_order', []), 0
            for part_size in order:
                if current_page >= total_pages: break
                end_page = min(current_page + part_size, total_pages)
                ranges.append(list(range(current_page, end_page)))
                current_page = end_page
        
        base_name = os.path.splitext(doc_to_process.file_name)[0]
        for i, page_range in enumerate(ranges):
            new_doc = fitz.open()
            new_doc.insert_pdf(pdf_doc, from_page=page_range[0], to_page=page_range[-1])
            await context.bot.send_document(chat_id=chat_id, document=new_doc.write(), filename=f"{base_name}_part_{i + 1}.pdf")
            new_doc.close()
        pdf_doc.close()
        await context.bot.send_message(chat_id=chat_id, text="–ì–æ—Ç–æ–≤–æ! –í—Å–µ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ: {e}")
        await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –ø–æ–≤—Ä–µ–∂–¥–µ–Ω.")
    return await end_conversation(update, context)

async def handle_group_action_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    if query.data == 'group_combine': return await combine_files_handler(update, context)
    elif query.data == 'group_split':
        context.user_data['split_mode'] = 'group_split'
        await query.edit_message_text("–•–æ—Ä–æ—à–æ, –Ω–∞—á–∏–Ω–∞—é —Ä–∞–∑–±–∏–≤–∫—É –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞...")
        files_to_split = context.user_data.get('files_to_process', [])
        for doc in files_to_split:
            context.user_data['file_to_process'] = doc
            mock_update = type('MockUpdate', (), {'effective_chat': update.effective_chat, 'message': None, 'callback_query': None})()
            await split_file_handler(mock_update, context)
        return await end_conversation(update, context)

# --- –õ–û–ì–ò–ö–ê –°–¶–ï–ù–ê–†–ò–Ø "–û–ë–™–ï–î–ò–ù–ò–¢–¨ PDF" ---
async def ask_for_combine_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['files_to_process'] = []
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", callback_data="process_done")], [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]])
    await query.edit_message_text("–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ PDF —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.", reply_markup=keyboard)
    return AWAIT_COMBINE_FILES

async def receive_file_for_list(update: Update, context: ContextTypes.DEFAULT_TYPE, next_state: int):
    if 'files_to_process' not in context.user_data: context.user_data['files_to_process'] = []
    context.user_data['files_to_process'].append(update.message.document)
    return next_state

async def combine_files_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    documents = context.user_data.get('files_to_process', [])
    if len(documents) < 2:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–∏—à–ª–∏—Ç–µ –µ—â–µ.")
        return AWAIT_COMBINE_FILES
    await query.edit_message_text("–ù–∞—á–∏–Ω–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ...")
    try:
        result_doc = fitz.open()
        for doc in documents:
            file = await context.bot.get_file(doc.file_id)
            file_bytes = await file.download_as_bytearray()
            pdf_doc = fitz.open(stream=file_bytes, filetype="pdf")
            result_doc.insert_pdf(pdf_doc)
            pdf_doc.close()
        await context.bot.send_document(chat_id=update.effective_chat.id, document=result_doc.write(), filename="combined_document.pdf", caption="–ì–æ—Ç–æ–≤–æ! –í–∞—à –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª.")
        result_doc.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤.")
    return await end_conversation(update, context)

# --- –õ–û–ì–ò–ö–ê –°–¶–ï–ù–ê–†–ò–Ø "–°–û–ë–†–ê–¢–¨ –° –û–ë–©–ò–ú –§–ê–ô–õ–û–ú" ---
async def ask_for_assembly_common_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –û–î–ò–ù –æ–±—â–∏–π PDF —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º.")
    return AWAIT_ASSEMBLY_COMMON

async def receive_assembly_common_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if update.message.effective_attachment and len(update.message.effective_attachment) > 1:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ò–ù –æ–±—â–∏–π —Ñ–∞–π–ª. –Ø –≤–æ–∑—å–º—É –ø–µ—Ä–≤—ã–π –∏–∑ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã—Ö.")
    context.user_data['common_file'] = update.message.document
    context.user_data['files_to_process'] = []
    keyboard = InlineKeyboardMarkup([[InlineKeyboardButton("‚úÖ –°–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã", callback_data="process_done")], [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]])
    await update.message.reply_text("–û–±—â–∏–π —Ñ–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ PDF. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É.", reply_markup=keyboard)
    return AWAIT_ASSEMBLY_UNIQUE

async def assembly_files_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    unique_docs = context.user_data.get('files_to_process', [])
    common_doc_msg = context.user_data.get('common_file')
    if not unique_docs:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏. –ü—Ä–∏—à–ª–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω.")
        return AWAIT_ASSEMBLY_UNIQUE
    await query.edit_message_text("–ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É...")
    try:
        common_file = await context.bot.get_file(common_doc_msg.file_id)
        common_file_bytes = await common_file.download_as_bytearray()
        for doc in unique_docs:
            unique_file = await context.bot.get_file(doc.file_id)
            unique_file_bytes = await unique_file.download_as_bytearray()
            result_doc = fitz.open(stream=unique_file_bytes, filetype="pdf")
            common_pdf = fitz.open(stream=common_file_bytes, filetype="pdf")
            result_doc.insert_pdf(common_pdf)
            common_pdf.close()
            await context.bot.send_document(chat_id=update.effective_chat.id, document=result_doc.write(), filename=f"assembled_{doc.file_name}")
            result_doc.close()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ: {e}")
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤.")
    return await end_conversation(update, context)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö –ò –ù–ï–í–ï–†–ù–û–ì–û –í–í–û–î–ê ---
async def handle_invalid_file_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–≠—Ç–æ –Ω–µ PDF-—Ñ–∞–π–ª. –Ø —É–º–µ—é —Ä–∞–±–æ—Ç–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å PDF.")
async def handle_unexpected_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é —Ñ–∞–π–ª, –∞ –Ω–µ —Ç–µ–∫—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç.")
async def handle_unexpected_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–µ —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /start.")

# --- –¢–û–ß–ö–ê –í–•–û–î–ê –ò –ó–ê–ü–£–°–ö ---
def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN: raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), MessageHandler(filters.ATTACHMENT, direct_file_handler)],
        states={
            CHOOSE_ACTION: [
               CallbackQueryHandler(ask_split_mode, pattern="^split$"),
               CallbackQueryHandler(ask_for_combine_files, pattern="^combine$"),
               CallbackQueryHandler(ask_for_assembly_common_file, pattern="^assembly$"),
               # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à "—É–º–Ω—ã–π" –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—é–¥–∞ —Ç–æ–∂–µ
               MessageHandler(filters.ATTACHMENT, direct_file_handler)
            ],
            CHOOSE_SPLIT_MODE: [CallbackQueryHandler(handle_split_choice, pattern="^split_")],
            AWAIT_SPLIT_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_split_order)],
            AWAIT_SPLIT_FILE: [MessageHandler(filters.Document.PDF, split_file_handler)],
            AWAIT_COMBINE_FILES: [MessageHandler(filters.Document.PDF, lambda u, c: receive_file_for_list(u, c, AWAIT_COMBINE_FILES)), CallbackQueryHandler(combine_files_handler, pattern="^process_done$")],
            AWAIT_ASSEMBLY_COMMON: [MessageHandler(filters.Document.PDF, receive_assembly_common_file)],
            AWAIT_ASSEMBLY_UNIQUE: [MessageHandler(filters.Document.PDF, lambda u, c: receive_file_for_list(u, c, AWAIT_ASSEMBLY_UNIQUE)), CallbackQueryHandler(assembly_files_handler, pattern="^process_done$")],
            AWAITING_GROUP_ACTION_CHOICE: [CallbackQueryHandler(handle_group_action_choice, pattern="^group_")],
        },
        fallbacks=[
            CommandHandler("start", start),
            CallbackQueryHandler(main_menu, pattern="^main_menu$"),
            MessageHandler(filters.Document.ALL & ~filters.Document.PDF, handle_invalid_file_type),
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_unexpected_text),
            MessageHandler(filters.ALL, handle_unexpected_input),
        ],
        per_message=False,
    )
    application.add_handler(conv_handler)
    application.add_error_handler(lambda u, c: logger.error(f"Update {u} caused error {c.error}"))

    WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")
    if WEBHOOK_URL:
        port = int(os.environ.get('PORT', '8443'))
        application.run_webhook(listen="0.0.0.0", port=port, url_path=TOKEN, webhook_url=f"{WEBHOOK_URL}/{TOKEN}")
    else:
        application.run_polling()

if __name__ == "__main__":
    main()


