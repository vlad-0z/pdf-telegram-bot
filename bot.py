import os
import logging
import re
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
    CallbackQueryHandler,
)
import fitz  # PyMuPDF
from collections import defaultdict

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –Ω–∞ Render ---
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è ConversationHandler ---
# --- –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω—ã –Ω–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ---
CHOOSE_ACTION, CHOOSE_SPLIT_MODE, AWAIT_SPLIT_FILE, AWAIT_SPLIT_ORDER, \
AWAIT_COMBINE_FILES, AWAIT_ASSEMBLY_COMMON, AWAIT_ASSEMBLY_UNIQUE, \
CHOOSE_GROUP_ACTION, AWAIT_GROUP_SPLIT_CHOICE = range(9)

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
MAIN_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("ü™ì –†–∞–∑–±–∏—Ç—å PDF —Ñ–∞–π–ª", callback_data="split")],
    [InlineKeyboardButton("üñáÔ∏è –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ PDF", callback_data="combine")],
    [InlineKeyboardButton("‚ûï –°–æ–±—Ä–∞—Ç—å —Å –æ–±—â–∏–º —Ñ–∞–π–ª–æ–º", callback_data="assembly")],
])

# --- –ù–û–í–´–ô –ë–õ–û–ö: –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–æ–≤—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ ---
GROUP_ACTION_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("üñáÔ∏è –û–±—ä–µ–¥–∏–Ω–∏—Ç—å –≤—Å–µ –≤ –æ–¥–∏–Ω —Ñ–∞–π–ª", callback_data="group_combine")],
    [InlineKeyboardButton("ü™ì –†–∞–∑–±–∏—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏", callback_data="group_split")],
    [InlineKeyboardButton("¬´ –û—Ç–º–µ–Ω–∞", callback_data="main_menu")],
])

SPLIT_MODE_KEYBOARD = InlineKeyboardMarkup([
    [InlineKeyboardButton("–ü–æ –æ–¥–Ω–æ–º—É –ª–∏—Å—Ç—É", callback_data="split_single"), InlineKeyboardButton("–ü–æ –¥–≤–∞ –ª–∏—Å—Ç–∞", callback_data="split_double")],
    [InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –ø–æ—Ä—è–¥–æ–∫", callback_data="split_custom")],
    [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
])

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø
# –≠—Ç–æ –Ω—É–∂–Ω–æ, —á—Ç–æ–±—ã —Å–æ–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π
media_group_files = defaultdict(list)

# --- –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–ò–ê–õ–û–ì–ê ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞, —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –ø–æ–∫–∞–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
    context.user_data.clear()
    await update.message.reply_text(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –≤–∞—à –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å PDF.\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=MAIN_KEYBOARD
    )
    return CHOOSE_ACTION

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    context.user_data.clear()
    query = update.callback_query
    await query.answer()
    await query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=MAIN_KEYBOARD
    )
    return CHOOSE_ACTION

async def end_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE, message: str = "–ß–µ–º –µ—â–µ –º–æ–≥—É –ø–æ–º–æ—á—å?"):
    """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."""
    context.user_data.clear()
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –≤—ã–∑–æ–≤ - –∏–∑ CallbackQuery –∏–ª–∏ Message
    chat_id = update.effective_chat.id
    if update.callback_query:
        await update.callback_query.answer()
    await context.bot.send_message(
        chat_id=chat_id,
        text=message,
        reply_markup=MAIN_KEYBOARD
    )
    return CHOOSE_ACTION

# --- –ù–û–í–´–ô –ë–õ–û–ö: –õ–æ–≥–∏–∫–∞ –¥–ª—è "–±—ã—Å—Ç—Ä—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤" ---

async def document_shortcut_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ª—é–±–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –æ–¥–∏–Ω —Ñ–∞–π–ª –∏–ª–∏ –≥—Ä—É–ø–ø–∞, –∏ –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –Ω—É–∂–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π.
    """
    # –ï—Å–ª–∏ —ç—Ç–æ —á–∞—Å—Ç—å –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—ã
    if update.message.media_group_id:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        media_group_id = update.message.media_group_id
        media_group_files[media_group_id].append(update.message.document)

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        jobs = context.job_queue.get_jobs_by_name(str(media_group_id))
        for job in jobs:
            job.schedule_removal()

        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É, —á—Ç–æ–±—ã –¥–æ–∂–¥–∞—Ç—å—Å—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≥—Ä—É–ø–ø—ã
        context.job_queue.run_once(
            process_media_group,
            when=1,  # 1 —Å–µ–∫—É–Ω–¥–∞ –∑–∞–¥–µ—Ä–∂–∫–∏
            data={'media_group_id': media_group_id, 'chat_id': update.effective_chat.id},
            name=str(media_group_id)
        )
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –ø–æ–∫–∞ –Ω–µ —Å–æ–±–µ—Ä–µ–º –≤—Å—é –≥—Ä—É–ø–ø—É
        return ConversationHandler.END # –í—Ä–µ–º–µ–Ω–Ω–æ –≤—ã—Ö–æ–¥–∏–º, –∂–¥–µ–º job

    # –ï—Å–ª–∏ —ç—Ç–æ –æ–¥–∏–Ω —Ñ–∞–π–ª
    else:
        document = update.message.document
        if document.mime_type != 'application/pdf':
            await update.message.reply_text("–û–π, —ç—Ç–æ –Ω–µ PDF-—Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–º–µ–Ω–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
            return CHOOSE_ACTION

        # "–ó–∞–ø–æ–º–∏–Ω–∞–µ–º" —Ñ–∞–π–ª –∏ —Å—Ä–∞–∑—É –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –µ–≥–æ —Ä–∞–∑–±–∏—Ç—å
        context.user_data['file_to_split'] = document
        await update.message.reply_text(
            f"–Ø –ø–æ–ª—É—á–∏–ª–∞ —Ñ–∞–π–ª `{document.file_name}`.\n–ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ —Ä–∞–∑–±–∏—Ç—å?",
            reply_markup=SPLIT_MODE_KEYBOARD,
            parse_mode='MarkdownV2'
        )
        return CHOOSE_SPLIT_MODE

async def process_media_group(context: ContextTypes.DEFAULT_TYPE):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—Ä–∞–Ω–Ω—É—é –º–µ–¥–∏–∞–≥—Ä—É–ø–ø—É –ø–æ—Å–ª–µ –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏.
    """
    job_data = context.job.data
    media_group_id = job_data['media_group_id']
    chat_id = job_data['chat_id']
    
    files = media_group_files.pop(media_group_id, [])
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã - PDF
    pdf_files = [f for f in files if f.mime_type == 'application/pdf']
    
    if len(pdf_files) < 2: # –ï—Å–ª–∏ PDF-—Ñ–∞–π–ª–æ–≤ –º–µ–Ω—å—à–µ –¥–≤—É—Ö
        await context.bot.send_message(chat_id, "–î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω–æ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –¥–≤–∞ PDF —Ñ–∞–π–ª–∞.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
    context.chat_data[chat_id] = {'files_to_process': pdf_files}
    
    await context.bot.send_message(
        chat_id,
        f"–Ø –ø–æ–ª—É—á–∏–ª–∞ {len(pdf_files)} PDF —Ñ–∞–π–ª–∞(–æ–≤). –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å –Ω–∏–º–∏ —Å–¥–µ–ª–∞—Ç—å?",
        reply_markup=GROUP_ACTION_KEYBOARD
    )
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–Ω–µ ConversationHandler, –ø–æ—ç—Ç–æ–º—É –º—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

# --- –õ–û–ì–ò–ö–ê –°–¶–ï–ù–ê–†–ò–Ø "–†–ê–ó–ë–ò–¢–¨ PDF" ---

async def ask_split_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ö–∞–∫ –∏–º–µ–Ω–Ω–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Ä–∞–∑–±–∏—Ç—å PDF —Ñ–∞–π–ª?", reply_markup=SPLIT_MODE_KEYBOARD)
    return CHOOSE_SPLIT_MODE

async def handle_split_choice(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['split_mode'] = query.data

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —á–µ—Ä–µ–∑ "–±—ã—Å—Ç—Ä—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π" ---
    if 'file_to_split' in context.user_data:
        # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å, –ø–µ—Ä–µ—Ö–æ–¥–∏–º —Å—Ä–∞–∑—É –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ
        if query.data != 'split_custom':
            return await split_file_handler(update, context, pre_saved=True)
    
    if query.data == 'split_custom':
        await query.edit_message_text(
            "–•–æ—Ä–æ—à–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ—Ä—è–¥–∫–æ–º —Ä–∞–∑–±–∏–≤–∫–∏.\n\n"
            "**–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —É –≤–∞—Å 10-—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç –∏ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ `3,3,4`**, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ —Ç—Ä–∏ —Ñ–∞–π–ª–∞:\n"
            "‚Ä¢ **–ü–µ—Ä–≤—ã–π:** —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ 1-3\n‚Ä¢ **–í—Ç–æ—Ä–æ–π:** —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ 4-6\n‚Ä¢ **–¢—Ä–µ—Ç–∏–π:** —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ 7-10\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.",
            parse_mode="Markdown"
        )
        return AWAIT_SPLIT_ORDER
    else:
        await query.edit_message_text("–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏.")
        return AWAIT_SPLIT_FILE

async def receive_split_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    order = update.message.text
    if not re.match(r'^\d+(,\d+)*$', order):
        await update.message.reply_text("–ö–∞–∂–µ—Ç—Å—è, —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–∞–ø—è—Ç—ã–µ. –ù–∞–ø—Ä–∏–º–µ—Ä: `3,3,4`")
        return AWAIT_SPLIT_ORDER
    context.user_data['custom_order'] = [int(x) for x in order.split(',')]
    
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ---
    if 'file_to_split' in context.user_data:
        return await split_file_handler(update, context, pre_saved=True)
    else:
        await update.message.reply_text(f'–û—Ç–ª–∏—á–Ω–æ, –ø–æ—Ä—è–¥–æ–∫ "{order}" –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ PDF —Ñ–∞–π–ª.')
        return AWAIT_SPLIT_FILE

async def split_file_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, pre_saved: bool = False) -> int:
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –õ–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–π–ª–∞ ---
    if pre_saved:
        # –§–∞–π–ª –±—ã–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Ä–∞–Ω–µ–µ
        document = context.user_data.get('file_to_split')
        message_to_reply = update.callback_query.message if update.callback_query else update.message
        await message_to_reply.reply_text("–§–∞–π–ª —É–∂–µ –µ—Å—Ç—å. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
    else:
        # –§–∞–π–ª —Ç–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        document = update.message.document
        await update.message.reply_text("–§–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    try:
        file = await context.bot.get_file(document.file_id)
        file_bytes = await file.download_as_bytearray()
        pdf_doc = fitz.open(stream=file_bytes, filetype="pdf")
        total_pages = pdf_doc.page_count
        ranges, mode = [], context.user_data.get('split_mode')
        
        # ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–∑–±–∏–≤–∫–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        if mode == 'split_single': ranges = [[i] for i in range(total_pages)]
        elif mode == 'split_double':
            ranges = [[i, i + 1] for i in range(0, total_pages, 2)]
            if total_pages % 2 != 0: ranges[-1] = [total_pages - 1]
        elif mode == 'split_custom':
            order, current_page = context.user_data.get('custom_order', []), 0
            for part_size in order:
                if current_page >= total_pages: break
                end_page = min(current_page + part_size, total_pages)
                ranges.append(list(range(current_page, end_page)))
                current_page = end_page

        base_name = os.path.splitext(document.file_name)[0]
        for i, page_range in enumerate(ranges):
            new_doc = fitz.open()
            new_doc.insert_pdf(pdf_doc, from_page=page_range[0], to_page=page_range[-1])
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=new_doc.write(),
                filename=f"{base_name}_part_{i + 1}.pdf"
            )
            new_doc.close()
        
        final_message = "–ì–æ—Ç–æ–≤–æ! –í—Å–µ —á–∞—Å—Ç–∏ —Ñ–∞–π–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã."

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–∏–≤–∫–µ PDF: {e}")
        final_message = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –ø–æ–≤—Ä–µ–∂–¥–µ–Ω."
    
    return await end_conversation(update, context, message=final_message)


# --- –õ–û–ì–ò–ö–ê –°–¶–ï–ù–ê–†–ò–Ø "–û–ë–™–ï–î–ò–ù–ò–¢–¨ PDF" ---

async def ask_for_combine_files(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    context.user_data['files_to_process'] = []
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã", callback_data="process_done")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await query.edit_message_text(
        "–ü–æ–Ω—è–ª. –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –º–Ω–µ PDF —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.", reply_markup=keyboard)
    return AWAIT_COMBINE_FILES

async def receive_file_for_list(update: Update, context: ContextTypes.DEFAULT_TYPE, next_state: int):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ —Å–ø–∏—Å–æ–∫."""
    if 'files_to_process' not in context.user_data:
        context.user_data['files_to_process'] = []
    context.user_data['files_to_process'].append(update.message.document)
    return next_state

async def combine_files_handler(update: Update, context: ContextTypes.DEFAULT_TYPE, from_group: bool = False) -> int:
    query = update.callback_query
    await query.answer()
    
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª—ã –ª–∏–±–æ –∏–∑ user_data (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—É—Ç—å), –ª–∏–±–æ –∏–∑ chat_data (–Ω–æ–≤—ã–π –ø—É—Ç—å) ---
    if from_group:
        documents = context.chat_data.get(update.effective_chat.id, {}).get('files_to_process', [])
    else:
        documents = context.user_data.get('files_to_process', [])

    if len(documents) < 2:
        await context.bot.send_message(chat_id=update.effective_chat.id, text=f"–í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ç–æ–ª—å–∫–æ {len(documents)} —Ñ–∞–π–ª. –ù—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã –¥–≤–∞.")
        return AWAIT_COMBINE_FILES if not from_group else CHOOSE_GROUP_ACTION
    
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –ù–∞—á–∏–Ω–∞—é –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ...")
    try:
        result_doc = fitz.open()
        for doc in documents:
            file = await context.bot.get_file(doc.file_id)
            file_bytes = await file.download_as_bytearray()
            pdf_doc = fitz.open(stream=file_bytes, filetype="pdf")
            result_doc.insert_pdf(pdf_doc)
            pdf_doc.close()
            
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=result_doc.write(),
            filename="combined_document.pdf",
            caption="–ì–æ—Ç–æ–≤–æ! –í–∞—à –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π —Ñ–∞–π–ª."
        )
        result_doc.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ PDF: {e}")
        await query.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
        
    return await end_conversation(update, context)

# --- –ù–û–í–´–ô –ë–õ–û–ö: –õ–æ–≥–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–∞–∑–±–∏–≤–∫–∏ ---

async def ask_group_split_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–°–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ä–∞–∑–±–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏–∑ –≥—Ä—É–ø–ø—ã."""
    query = update.callback_query
    await query.answer()
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("–ü–æ –æ–¥–Ω–æ–º—É –ª–∏—Å—Ç—É", callback_data="split_single"), InlineKeyboardButton("–ü–æ –¥–≤–∞ –ª–∏—Å—Ç–∞", callback_data="split_double")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="back_to_group_choice")]
    ])
    await query.edit_message_text(
        "–ü–æ–Ω—è–ª–∞. –ö–∞–∫ –∏–º–µ–Ω–Ω–æ —Ä–∞–∑–±–∏—Ç—å –ö–ê–ñ–î–´–ô –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤?",
        reply_markup=keyboard
    )
    return AWAIT_GROUP_SPLIT_CHOICE
    
async def group_split_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –∏–∑ –≥—Ä—É–ø–ø—ã –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ä–µ–∂–∏–º–æ–º."""
    query = update.callback_query
    await query.answer()
    
    split_mode = query.data
    documents = context.chat_data.get(update.effective_chat.id, {}).get('files_to_process', [])
    
    if not documents:
        await query.edit_message_text("–ù–µ –Ω–∞—à–ª–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return await end_conversation(update, context)
        
    await query.edit_message_text(f"–ü—Ä–∏–Ω—è—Ç–æ! –ù–∞—á–∏–Ω–∞—é —Ä–∞–∑–±–∏–≤–∫—É {len(documents)} —Ñ–∞–π–ª–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...")
    
    try:
        for doc_msg in documents:
            file = await context.bot.get_file(doc_msg.file_id)
            file_bytes = await file.download_as_bytearray()
            pdf_doc = fitz.open(stream=file_bytes, filetype="pdf")
            total_pages = pdf_doc.page_count
            
            ranges = []
            if split_mode == 'split_single': ranges = [[i] for i in range(total_pages)]
            elif split_mode == 'split_double':
                ranges = [[i, i + 1] for i in range(0, total_pages, 2)]
                if total_pages % 2 != 0: ranges[-1] = [total_pages - 1]
            
            base_name = os.path.splitext(doc_msg.file_name)[0]
            for i, page_range in enumerate(ranges):
                new_doc = fitz.open()
                new_doc.insert_pdf(pdf_doc, from_page=page_range[0], to_page=page_range[-1])
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=new_doc.write(),
                    filename=f"{base_name}_part_{i + 1}.pdf"
                )
                new_doc.close()
            pdf_doc.close()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–∞–∑–±–∏–≤–∫–µ PDF: {e}")
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤.")
        
    return await end_conversation(update, context, message="–ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")

# --- –õ–û–ì–ò–ö–ê –°–¶–ï–ù–ê–†–ò–Ø "–°–û–ë–†–ê–¢–¨ –° –û–ë–©–ò–ú –§–ê–ô–õ–û–ú" ---

async def ask_for_assembly_common_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–•–æ—Ä–æ—à–æ. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –û–î–ò–ù –æ–±—â–∏–π PDF —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –∫–æ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º.")
    return AWAIT_ASSEMBLY_COMMON

async def receive_assembly_common_file(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    context.user_data['common_file'] = update.message.document
    context.user_data['files_to_process'] = []
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –°–æ–±—Ä–∞—Ç—å —Ñ–∞–π–ª—ã", callback_data="process_done")],
        [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")]
    ])
    await update.message.reply_text(
        "–û–±—â–∏–π —Ñ–∞–π–ª –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –£–ù–ò–ö–ê–õ–¨–ù–´–ï PDF —Ñ–∞–π–ª—ã. –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=keyboard
    )
    return AWAIT_ASSEMBLY_UNIQUE

async def assembly_files_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    query = update.callback_query
    await query.answer()
    unique_docs = context.user_data.get('files_to_process', [])
    common_doc_msg = context.user_data.get('common_file')
    if not unique_docs:
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è —Å–±–æ—Ä–∫–∏.")
        return AWAIT_ASSEMBLY_UNIQUE
    await query.edit_message_text("–í—Å–µ —Ñ–∞–π–ª—ã –ø–æ–ª—É—á–µ–Ω—ã. –ù–∞—á–∏–Ω–∞—é —Å–±–æ—Ä–∫—É...")
    try:
        common_file = await context.bot.get_file(common_doc_msg.file_id)
        common_file_bytes = await common_file.download_as_bytearray()
        
        for doc in unique_docs:
            unique_file = await context.bot.get_file(doc.file_id)
            unique_file_bytes = await unique_file.download_as_bytearray()
            
            result_doc = fitz.open(stream=unique_file_bytes, filetype="pdf")
            common_pdf = fitz.open(stream=common_file_bytes, filetype="pdf")
            result_doc.insert_pdf(common_pdf)
            common_pdf.close()
            
            await context.bot.send_document(
                chat_id=update.effective_chat.id,
                document=result_doc.write(),
                filename=f"assembled_{doc.file_name}"
            )
            result_doc.close()
        await context.bot.send_message(chat_id=update.effective_chat.id, text="–ì–æ—Ç–æ–≤–æ! –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–±—Ä–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ PDF: {e}")
        await query.message.reply_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–¥–Ω–æ–≥–æ –∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.")
    return await end_conversation(update, context)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–®–ò–ë–û–ö –ò –ù–ï–í–ï–†–ù–û–ì–û –í–í–û–î–ê ---

async def handle_invalid_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–π, —ç—Ç–æ –Ω–µ PDF-—Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –∏–º–µ–Ω–Ω–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")

async def handle_text_instead_of_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–µ–π—á–∞—Å —è –æ–∂–∏–¥–∞—é –æ—Ç –≤–∞—Å PDF-—Ñ–∞–π–ª. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏.")

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"Update {update} caused error {context.error}")

# --- –¢–û–ß–ö–ê –í–•–û–î–ê –ò –ó–ê–ü–£–°–ö ---

def main():
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    if not TOKEN: raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN")
    application = Application.builder().token(TOKEN).build()
    
    # --- –ò–ó–ú–ï–ù–ï–ù–û: –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π ---
    # –û–Ω –±—É–¥–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è –Ω–µ –∫–æ–º–∞–Ω–¥–æ–π, –∞ –∏–∑–Ω—É—Ç—Ä–∏ –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–∏, –ø–æ—ç—Ç–æ–º—É entry_points –ø—É—Å—Ç.
    group_conv_handler = ConversationHandler(
        entry_points=[
            CallbackQueryHandler(lambda u,c: combine_files_handler(u,c,from_group=True), pattern="^group_combine$"),
            CallbackQueryHandler(ask_group_split_mode, pattern="^group_split$"),
        ],
        states={
            AWAIT_GROUP_SPLIT_CHOICE: [CallbackQueryHandler(group_split_handler, pattern="^split_(single|double)$")],
        },
        fallbacks=[
            CallbackQueryHandler(main_menu, pattern="^main_menu$"),
            CallbackQueryHandler(lambda u,c: u.callback_query.edit_message_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=GROUP_ACTION_KEYBOARD), pattern="^back_to_group_choice$")
        ],
        # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ª–∂–µ–Ω —Å–∞–º —Ä–µ—à–∞—Ç—å—Å—è, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç
        conversation_timeout=300 
    )

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –û—Å–Ω–æ–≤–Ω–æ–π ConversationHandler —Ç–µ–ø–µ—Ä—å –∏–º–µ–µ—Ç –Ω–æ–≤—É—é —Ç–æ—á–∫—É –≤—Ö–æ–¥–∞ ---
    main_conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞
            MessageHandler(filters.Document.PDF, document_shortcut_handler),
        ],
        states={
            CHOOSE_ACTION: [
                CallbackQueryHandler(ask_split_mode, pattern="^split$"),
                CallbackQueryHandler(ask_for_combine_files, pattern="^combine$"),
                CallbackQueryHandler(ask_for_assembly_common_file, pattern="^assembly$"),
            ],
            CHOOSE_SPLIT_MODE: [CallbackQueryHandler(handle_split_choice, pattern="^split_(single|double|custom)$")],
            AWAIT_SPLIT_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_split_order)],
            AWAIT_SPLIT_FILE: [MessageHandler(filters.Document.PDF, split_file_handler)],
            AWAIT_COMBINE_FILES: [
                MessageHandler(filters.Document.PDF, lambda u, c: receive_file_for_list(u, c, AWAIT_COMBINE_FILES)),
                CallbackQueryHandler(combine_files_handler, pattern="^process_done$"),
            ],
            AWAIT_ASSEMBLY_COMMON: [MessageHandler(filters.Document.PDF, receive_assembly_common_file)],
            AWAIT_ASSEMBLY_UNIQUE: [
                MessageHandler(filters.Document.PDF, lambda u, c: receive_file_for_list(u, c, AWAIT_ASSEMBLY_UNIQUE)),
                CallbackQueryHandler(assembly_files_handler, pattern="^process_done$"),
            ],
        },
        fallbacks=[
            CommandHandler("start", start),
            CallbackQueryHandler(main_menu, pattern="^main_menu$"),
            MessageHandler(filters.TEXT, handle_text_instead_of_file),
            MessageHandler(filters.ALL, handle_invalid_file),
        ],
        # –ü–æ–∑–≤–æ–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–º—É –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–æ–º—É
        allow_reentry=True
    )

    # --- –ò–ó–ú–ï–ù–ï–ù–û: –ü–æ—Ä—è–¥–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –≤–∞–∂–µ–Ω! ---
    # –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    application.add_handler(group_conv_handler)
    # –ó–∞—Ç–µ–º –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    application.add_handler(main_conv_handler)
    
    application.add_error_handler(error_handler)

    WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL")
    if WEBHOOK_URL:
        port = int(os.environ.get('PORT', '8443'))
        application.run_webhook(listen="0.0.0.0", port=port, url_path=TOKEN, webhook_url=f"{WEBHOOK_URL}/{TOKEN}")
    else:
        logger.info("–ó–∞–ø—É—Å–∫ –≤ —Ä–µ–∂–∏–º–µ polling...")
        application.run_polling()

if __name__ == "__main__":
    main()
